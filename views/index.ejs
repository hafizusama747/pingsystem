<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ping Pong RTT with Connection Stability and Packet Loss</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <!-- Chart.js for RTT graph -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        #status {
            font-size: 1.5rem;
            font-weight: bold;
        }
        #packetLoss {
            font-size: 1.2rem;
            color: #555;
        }
        #rttChart {
            width: 100%;
            height: 400px;
        }
        .container {
            margin-top: 20px;
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Function to initialize and reconnect the socket
            let socket = initializeSocket();

            // Variables to track ping status
            let unstablePingCount = 0;
            const maxUnstablePings = 12;
            let missedPings = 0;
            let totalPings = 0;
            const pingTimeout = 3000; // Timeout for missing pong (3 seconds)
            
            // RTT chart setup
            const rttData = [];
            const rttChart = new Chart(document.getElementById('rttChart').getContext('2d'), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'RTT (ms)',
                        data: rttData,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: { type: 'linear', position: 'bottom' },
                        y: { beginAtZero: true }
                    }
                }
            });

            // Function to initialize a new socket connection
            function initializeSocket() {
                const socket = io();
                socket.on('pong', handlePong);
                return socket;
            }

            // Function to send a ping to the server
            function sendPing() {
                const uid = Math.random().toString(36).substring(7);  // Generate unique ID
                const sendTime = Date.now();  // Current timestamp when ping is sent

                console.log(`Sending ping with UID: ${uid} at ${sendTime}`);
                totalPings++;

                // Create a timeout for missed ping (if no pong is received)
                const pingTimeoutId = setTimeout(() => {
                    console.log(`Ping with UID: ${uid} was missed (no pong received within timeout).`);
                    missedPings++;  // Increment missed ping count
                    updatePacketLossDisplay();
                }, pingTimeout);

                // Send the "ping" message to the server
                socket.emit('ping', { uid, sendTime, pingTimeoutId });
            }

            // Function to handle the pong response from the server
            function handlePong(data) {
                const receiveTime = Date.now();  // Timestamp when pong is received
                const sendTime = data.sendTime;  // Timestamp from the ping sent earlier
                const pingTimeoutId = data.pingTimeoutId;  // Timeout ID from the ping sent earlier

                // Clear the timeout for missed ping, since pong was received
                clearTimeout(pingTimeoutId);

                // Calculate RTT using client-side timestamps
                const rtt = receiveTime - sendTime;
                console.log(`Received pong with UID: ${data.uid}`);
                console.log(`RTT: ${rtt} ms`);

                // Evaluate connection stability
                if (rtt < 200) {
                    displayConnectionStatus('Stable', rtt, 'green', 'üëç');
                } else if (rtt >= 200 && rtt <= 300) {
                    displayConnectionStatus('Unstable', rtt, 'orange', '‚ö†Ô∏è');
                } else {
                    displayConnectionStatus('Very Unstable', rtt, 'red', '‚ùå');
                    unstablePingCount++;  // Increment unstable ping count
                }

                // Check if unstable ping count exceeds the threshold
                if (unstablePingCount >= maxUnstablePings) {
                    console.log("Disconnecting player due to poor connection...");
                    socket.emit('disconnectPlayer');  // Emit the custom event to disconnect
                    displayConnectionStatus('Disconnected due to high ping', rtt, 'red', '‚ùå');
                }

                updatePacketLossDisplay();

                // Update the RTT chart with new data
                rttData.push(rtt);
                rttChart.data.labels.push(receiveTime);
                rttChart.update();
            }

            // Function to display connection status in the UI
            function displayConnectionStatus(status, rtt, color, icon) {
                const statusElement = document.getElementById('status');
                statusElement.innerHTML = `${icon} ${status} | RTT: ${rtt} ms`;
                statusElement.style.color = color;  // Change color dynamically
            }

            // Function to update packet loss display
            function updatePacketLossDisplay() {
                const lossPercentage = (missedPings / totalPings) * 100;
                const lossElement = document.getElementById('packetLoss');
                lossElement.innerHTML = `Packet Loss: ${missedPings} missed pings (${lossPercentage.toFixed(2)}%)`;
            }

            // Event listener for ping interval
            document.getElementById('pingInterval').addEventListener('input', function() {
                const pingInterval = parseInt(this.value) * 1000;
                clearInterval(pingIntervalId);
                pingIntervalId = setInterval(sendPing, pingInterval);
            });

            // Send ping every 5 seconds by default
            let pingIntervalId = setInterval(sendPing, 5000);

            // Reset Button logic
            document.getElementById('resetBtn').addEventListener('click', function () {
                // Reset connection stats
                missedPings = 0;
                totalPings = 0;
                unstablePingCount = 0;
                updatePacketLossDisplay();
                displayConnectionStatus('Connecting...', 0, 'black', 'üîÑ');
                rttData.length = 0;  // Clear the chart data
                rttChart.update();

                // Close the current socket connection and create a new one
                socket.disconnect();
                socket = initializeSocket();
            });
        });
    </script>
</head>
<body>
    <div class="container mt-5">
        <h1>Ping Pong RTT with Connection Stability and Packet Loss</h1>
        <p>Open the browser console to see the RTT logs.</p>

        <div class="alert alert-info" id="status">Ping Status: Connecting...</div>
        <div class="alert alert-warning" id="packetLoss">Packet Loss: 0 missed pings (0%)</div>

        <div class="form-group">
            <label for="pingInterval">Ping Interval (in seconds):</label>
            <input type="number" id="pingInterval" class="form-control" min="1" value="5">
        </div>

        <div>
            <canvas id="rttChart"></canvas>
        </div>

        <button id="resetBtn" class="btn btn-primary mt-3">Reset Connection Stats</button>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
