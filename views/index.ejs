<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ping Pong RTT with Connection Stability and Packet Loss</title>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Connect to the server using Socket.IO
        const socket = io();

        // Variables to track ping status
        let unstablePingCount = 0;  // Count consecutive unstable pings
        const maxUnstablePings = 10;  // Max number of unstable pings before disconnect
        let missedPings = 0;  // Count missed pings (packet loss)
        let totalPings = 0;  // Count total pings sent

        // Timeout for missed ping (in milliseconds)
        const pingTimeout = 3000; // Timeout of 3 seconds (for missing pong)

        // Function to send a ping to the server
        function sendPing() {
            const uid = Math.random().toString(36).substring(7);  // Generate unique ID
            const sendTime = Date.now();  // Current timestamp when ping is sent

            console.log(`Sending ping with UID: ${uid} at ${sendTime}`);

            // Increment total ping count
            totalPings++;

            // Create a timeout for missed ping (if no pong is received)
            const pingTimeoutId = setTimeout(() => {
                console.log(`Ping with UID: ${uid} was missed (no pong received within timeout).`);
                missedPings++;  // Increment missed ping count
                updatePacketLossDisplay();
            }, pingTimeout);

            // Send the "ping" message to the server
            socket.emit('ping', { uid, sendTime, pingTimeoutId });
        }

        // Listen for the "pong" message from the server
        socket.on('pong', (data) => {
            const receiveTime = Date.now();  // Timestamp when pong is received
            const sendTime = data.sendTime;  // Timestamp from the ping sent earlier
            const pingTimeoutId = data.pingTimeoutId;  // Timeout ID from the ping sent earlier

            // Clear the timeout for missed ping, since pong was received
            clearTimeout(pingTimeoutId);

            // Calculate RTT using client-side timestamps
            const rtt = receiveTime - sendTime;
            console.log(`Received pong with UID: ${data.uid}`);
            console.log(`RTT: ${rtt} ms`);

            // Evaluate connection stability
            if (rtt < 30) {
                console.log("Connection is stable");
                unstablePingCount = 0;  // Reset unstable ping count
                displayConnectionStatus('Stable', rtt);
            } else if (rtt >= 30 && rtt <= 50) {
                console.log("Connection is unstable");
                displayConnectionStatus('Unstable', rtt);
            } else {
                console.log("Connection is very unstable");
                displayConnectionStatus('Very Unstable', rtt);
                unstablePingCount++;  // Increment unstable ping count
            }

            // Check if unstable ping count exceeds the threshold
            if (unstablePingCount >= maxUnstablePings) {
                console.log("Disconnecting player due to poor connection...");
                socket.emit('disconnectPlayer');  // Emit the custom event to disconnect
                displayConnectionStatus('Disconnected due to high ping', rtt);
            }

            updatePacketLossDisplay();
        });

        // Function to display connection status in the UI (or log to console)
        function displayConnectionStatus(status, rtt) {
            const statusElement = document.getElementById('status');
            statusElement.innerHTML = `Ping Status: ${status} | RTT: ${rtt} ms`;
        }

        // Function to update packet loss display
        function updatePacketLossDisplay() {
            const lossPercentage = (missedPings / totalPings) * 100;
            const lossElement = document.getElementById('packetLoss');
            lossElement.innerHTML = `Packet Loss: ${missedPings} missed pings (${lossPercentage.toFixed(2)}%)`;
        }

        // Send ping every 5 seconds (as an example)
        setInterval(sendPing, 5000);
    </script>
</head>
<body>
    <h1>Ping Pong RTT with Connection Stability and Packet Loss</h1>
    <p>Open the browser console to see the RTT logs.</p>
    <p id="status">Ping Status: Connecting...</p>
    <p id="packetLoss">Packet Loss: 0 missed pings (0%)</p>  <!-- Display packet loss here -->
</body>
</html>
